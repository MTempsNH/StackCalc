{"{\"assumptions\":{},\"sourceRoot\":\"/Users/mark/Projects/CodingChallenges/StackParsing/test/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/mark/Projects/CodingChallenges/StackParsing\",\"filename\":\"/Users/mark/Projects/CodingChallenges/StackParsing/test/test.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/mark/Projects/CodingChallenges/StackParsing\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.17.9:development":{"value":{"code":"var assert = require('assert');\n\nimport { StackCalc } from './src/index.js';\ndescribe('Array', function () {\n  describe('#indexOf()', function () {\n    it('should return -1 when the value is not present', function () {\n      assert.equal([1, 2, 3].indexOf(4), -1);\n    });\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsIlN0YWNrQ2FsYyIsImRlc2NyaWJlIiwiaXQiLCJlcXVhbCIsImluZGV4T2YiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBQ0EsU0FBU0MsU0FBVCxRQUEwQixnQkFBMUI7QUFFQUMsUUFBUSxDQUFDLE9BQUQsRUFBVSxZQUFZO0FBQzVCQSxFQUFBQSxRQUFRLENBQUMsWUFBRCxFQUFlLFlBQVk7QUFDakNDLElBQUFBLEVBQUUsQ0FBQyxnREFBRCxFQUFtRCxZQUFZO0FBQy9ESixNQUFBQSxNQUFNLENBQUNLLEtBQVAsQ0FBYSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVQyxPQUFWLENBQWtCLENBQWxCLENBQWIsRUFBbUMsQ0FBQyxDQUFwQztBQUNELEtBRkMsQ0FBRjtBQUdELEdBSk8sQ0FBUjtBQUtELENBTk8sQ0FBUiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbWFyay9Qcm9qZWN0cy9Db2RpbmdDaGFsbGVuZ2VzL1N0YWNrUGFyc2luZy90ZXN0LyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbmltcG9ydCB7IFN0YWNrQ2FsYyB9IGZyb20gJy4vc3JjL2luZGV4LmpzJztcblxuZGVzY3JpYmUoJ0FycmF5JywgZnVuY3Rpb24gKCkge1xuICBkZXNjcmliZSgnI2luZGV4T2YoKScsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiAtMSB3aGVuIHRoZSB2YWx1ZSBpcyBub3QgcHJlc2VudCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFzc2VydC5lcXVhbChbMSwgMiwgM10uaW5kZXhPZig0KSwgLTEpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdfQ==","map":{"version":3,"sources":["test.js"],"names":["assert","require","StackCalc","describe","it","equal","indexOf"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEAC,QAAQ,CAAC,OAAD,EAAU,YAAY;AAC5BA,EAAAA,QAAQ,CAAC,YAAD,EAAe,YAAY;AACjCC,IAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAY;AAC/DJ,MAAAA,MAAM,CAACK,KAAP,CAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUC,OAAV,CAAkB,CAAlB,CAAb,EAAmC,CAAC,CAApC;AACD,KAFC,CAAF;AAGD,GAJO,CAAR;AAKD,CANO,CAAR","sourceRoot":"/Users/mark/Projects/CodingChallenges/StackParsing/test/","sourcesContent":["var assert = require('assert');\nimport { StackCalc } from './src/index.js';\n\ndescribe('Array', function () {\n  describe('#indexOf()', function () {\n    it('should return -1 when the value is not present', function () {\n      assert.equal([1, 2, 3].indexOf(4), -1);\n    });\n  });\n});"]}},"mtime":1651160940412}}